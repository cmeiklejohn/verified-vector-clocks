module 'vvclock' [ 'fresh'/0, 'init_timestamp'/0, 'incr_timestamp'/1, 'init_count'/0, 'incr_count'/1, 'increment'/2, 'equal@'/2, 'equal'/2, 'ble_nat'/2, 'descends@'/2, 'descends'/2, 'max@'/2, 'merge'/2, 'get_counter'/2, 'get_timestamp'/2, 'all_nodes'/1, 'bgt_nat'/2, 'prune@'/5 ] attributes [ ] 

'fresh'/0 = fun () ->
  []
'init_timestamp'/0 = fun () ->
  'O'
'incr_timestamp'/1 = fun (_timestamp) -> 
  {'S', _timestamp}
'init_count'/0 = fun () ->
  'O'
'incr_count'/1 = fun (_count) -> 
  {'S', _count}
'increment'/2 = fun (_actor, _vclock) -> 
  case call 'Coq.Lists.List':'find'
            ( fun (_clock) -> 
                case _clock of
                  { 'Pair'
                  , _y
                  , _x
                  } when 'true' ->
                      call 'Coq.Arith.EqNat':'beq_nat'
                           ( _actor
                           , _y
                           )
                 end
            , _vclock
            ) of
    {'Some', _p} when 'true' ->
        case _p of
          { 'Pair'
          , _p0
          , _x
          } when 'true' ->
              case _x of
                { 'Pair'
                , _timestamp
                , _count
                } when 'true' ->
                    [{ 'Pair'
                    , _p0
                    , { 'Pair'
                    , call 'vvclock':'incr_count' (_timestamp)
                    , call 'vvclock':'incr_timestamp' (_count)
                    }
                    }|call 'Coq.Lists.List':'filter'
                         ( fun (_clock) -> 
                             case _clock of
                               { 'Pair'
                               , _y
                               , _x0
                               } when 'true' ->
                                   call 'Coq.Init.Datatypes':'negb' (call 'Coq.Arith.EqNat':'beq_nat'
                                          ( _actor
                                          , _y
                                          ))
                              end
                         , _vclock
                         )]
               end
         end
    'None' when 'true' ->
        [{ 'Pair'
        , _actor
        , { 'Pair'
        , call 'vvclock':'init_count' ()
        , call 'vvclock':'init_timestamp' ()
        }
        }|_vclock]
   end
'equal@'/2 = fun (_status_and_vclock, _clock) -> 
  case _clock of
    { 'Pair'
    , _p
    , _actor
    } when 'true' ->
        case _actor of
          { 'Pair'
          , _timestamp
          , _count
          } when 'true' ->
              case _status_and_vclock of
                { 'Pair'
                , _vclock
                , _status
                } when 'true' ->
                    case call 'Coq.Lists.List':'find'
                              ( fun (_clock0) -> 
                                  case _clock0 of
                                    { 'Pair'
                                    , _y
                                    , _x
                                    } when 'true' ->
                                        call 'Coq.Arith.EqNat':'beq_nat'
                                             ( _p
                                             , _y
                                             )
                                   end
                              , _status
                              ) of
                      {'Some', _p0} when 'true' ->
                          case _p0 of
                            { 'Pair'
                            , _y0
                            , _n
                            } when 'true' ->
                                case _n of
                                  { 'Pair'
                                  , _z
                                  , _y
                                  } when 'true' ->
                                      { 'Pair'
                                      , case _vclock of
                                        'True' when 'true' ->
                                            case call 'Coq.Arith.EqNat':'beq_nat'
                                                      ( _timestamp
                                                      , _z
                                                      ) of
                                              'True' when 'true' ->
                                                  call 'Coq.Arith.EqNat':'beq_nat'
                                                       ( _count
                                                       , _y
                                                       )
                                              'False' when 'true' ->
                                                  'False'
                                             end
                                        'False' when 'true' ->
                                            'False'
                                       end
                                      , _status
                                      }
                                 end
                           end
                      'None' when 'true' ->
                          { 'Pair'
                          , 'False'
                          , _status
                          }
                     end
               end
         end
   end
'equal'/2 = fun (_vc1, _vc2) -> 
  case call 'Coq.Lists.List':'fold_left'
            ( 'equal@'
            , _vc1
            , { 'Pair'
              , 'True'
              , _vc2
              }
            ) of
    { 'Pair'
    , _l
    , _b
    } when 'true' ->
        case _l of
          'True' when 'true' ->
              case call 'Coq.Lists.List':'fold_left'
                        ( 'equal@'
                        , _vc2
                        , { 'Pair'
                          , 'True'
                          , _vc1
                          }
                        ) of
                { 'Pair'
                , _l0
                , _b0
                } when 'true' ->
                    _l0
               end
          'False' when 'true' ->
              'False'
         end
   end
'ble_nat'/2 = fun (_n, _m) -> 
  case _n of
    'O' when 'true' ->
        'True'
    {'S', _n@} when 'true' ->
        case _m of
          'O' when 'true' ->
              'False'
          {'S', _m@} when 'true' ->
              call 'vvclock':'ble_nat'
                   ( _n@
                   , _m@
                   )
         end
   end
'descends@'/2 = fun (_status_and_vclock, _clock) -> 
  case _clock of
    { 'Pair'
    , _p
    , _actor
    } when 'true' ->
        case _actor of
          { 'Pair'
          , _timestamp
          , _count
          } when 'true' ->
              case _status_and_vclock of
                { 'Pair'
                , _vclock
                , _status
                } when 'true' ->
                    case call 'Coq.Lists.List':'find'
                              ( fun (_clock0) -> 
                                  case _clock0 of
                                    { 'Pair'
                                    , _y
                                    , _x
                                    } when 'true' ->
                                        call 'Coq.Arith.EqNat':'beq_nat'
                                             ( _p
                                             , _y
                                             )
                                   end
                              , _status
                              ) of
                      {'Some', _p0} when 'true' ->
                          case _p0 of
                            { 'Pair'
                            , _y0
                            , _n
                            } when 'true' ->
                                case _n of
                                  { 'Pair'
                                  , _z
                                  , _y
                                  } when 'true' ->
                                      { 'Pair'
                                      , case _vclock of
                                        'True' when 'true' ->
                                            case call 'vvclock':'ble_nat'
                                                      ( _timestamp
                                                      , _z
                                                      ) of
                                              'True' when 'true' ->
                                                  call 'vvclock':'ble_nat'
                                                       ( _count
                                                       , _y
                                                       )
                                              'False' when 'true' ->
                                                  'False'
                                             end
                                        'False' when 'true' ->
                                            'False'
                                       end
                                      , _status
                                      }
                                 end
                           end
                      'None' when 'true' ->
                          { 'Pair'
                          , 'False'
                          , _status
                          }
                     end
               end
         end
   end
'descends'/2 = fun (_vc1, _vc2) -> 
  case call 'Coq.Lists.List':'fold_left'
            ( 'descends@'/2
            , _vc2
            , { 'Pair'
              , 'True'
              , _vc1
              }
            ) of
    { 'Pair'
    , _l
    , _b
    } when 'true' ->
        _l
   end
'max@'/2 = fun (_vclock, _clock) -> 
  case _clock of
    { 'Pair'
    , _p
    , _actor
    } when 'true' ->
        case _actor of
          { 'Pair'
          , _timestamp
          , _count
          } when 'true' ->
              case call 'Coq.Lists.List':'find'
                        ( fun (_clock0) -> 
                            case _clock0 of
                              { 'Pair'
                              , _y
                              , _x
                              } when 'true' ->
                                  call 'Coq.Arith.EqNat':'beq_nat'
                                       ( _p
                                       , _y
                                       )
                             end
                        , _vclock
                        ) of
                {'Some', _p0} when 'true' ->
                    case _p0 of
                      { 'Pair'
                      , _p1
                      , _n
                      } when 'true' ->
                          case _n of
                            { 'Pair'
                            , _z
                            , _y
                            } when 'true' ->
                                [{ 'Pair'
                                , _p
                                , { 'Pair'
                                , call 'Coq.Init.Peano':'max'
                                     ( _timestamp
                                     , _z
                                     )
                                , call 'Coq.Init.Peano':'max'
                                     ( _count
                                     , _y
                                     )
                                }
                                }|call 'Coq.Lists.List':'filter'
                                     ( fun (_clock0) -> 
                                         case _clock0 of
                                           { 'Pair'
                                           , _y0
                                           , _x
                                           } when 'true' ->
                                               call 'Coq.Init.Datatypes':'negb' (call 'Coq.Arith.EqNat':'beq_nat'
                                                      ( _p
                                                      , _y0
                                                      ))
                                          end
                                     , _vclock
                                     )]
                           end
                     end
                'None' when 'true' ->
                    [{ 'Pair'
                    , _p
                    , { 'Pair'
                    , _timestamp
                    , _count
                    }
                    }|_vclock]
               end
         end
   end
'merge'/2 = fun (_vc1, _vc2) -> 
  call 'Coq.Lists.List':'fold_left'
       ( 'max@'/2
       , _vc1
       , _vc2
       )
'get_counter'/2 = fun (_actor, _vclock) -> 
  case call 'Coq.Lists.List':'find'
            ( fun (_clock) -> 
                case _clock of
                  { 'Pair'
                  , _y
                  , _x
                  } when 'true' ->
                      call 'Coq.Arith.EqNat':'beq_nat'
                           ( _actor
                           , _y
                           )
                 end
            , _vclock
            ) of
    {'Some', _p} when 'true' ->
        case _p of
          { 'Pair'
          , _p0
          , _a
          } when 'true' ->
              case _a of
                { 'Pair'
                , _timetsamp
                , _count
                } when 'true' ->
                    {'Some', _timetsamp}
               end
         end
    'None' when 'true' ->
        'None'
   end
'get_timestamp'/2 = fun (_actor, _vclock) -> 
  case call 'Coq.Lists.List':'find'
            ( fun (_clock) -> 
                case _clock of
                  { 'Pair'
                  , _y
                  , _x
                  } when 'true' ->
                      call 'Coq.Arith.EqNat':'beq_nat'
                           ( _actor
                           , _y
                           )
                 end
            , _vclock
            ) of
    {'Some', _p} when 'true' ->
        {'Some', 'dummy'}
    'None' when 'true' ->
        'None'
   end
'all_nodes'/1 = fun (_vclock) -> 
  case _vclock of
    [] when 'true' ->
        []
    [_cs|_c] when 'true' ->
        case _cs of
          { 'Pair'
          , _y
          , _x
          } when 'true' ->
              [_y|call 'vvclock':'all_nodes' (_c)]
         end
   end
'bgt_nat'/2 = fun (_m, _n) -> 
  call 'Coq.Init.Datatypes':'negb' (call 'vvclock':'ble_nat'
         ( _m
         , _n
         ))
'prune@'/5 = fun (_vclock, _small, _large, _young, _old) -> 
  case _vclock of
    [] when 'true' ->
        _vclock
    [_clocks|_c] when 'true' ->
        case _clocks of
          { 'Pair'
          , _p
          , _actor
          } when 'true' ->
              case _actor of
                { 'Pair'
                , _timestamp
                , _count
                } when 'true' ->
                    case call 'vvclock':'ble_nat'
                              ( call 'Coq.Init.Datatypes':'length' (_vclock)
                              , _small
                              ) of
                      'True' when 'true' ->
                          _vclock
                      'False' when 'true' ->
                          case call 'vvclock':'ble_nat'
                                    ( _count
                                    , _young
                                    ) of
                            'True' when 'true' ->
                                _vclock
                            'False' when 'true' ->
                                case call 'vvclock':'bgt_nat'
                                          ( _count
                                          , _old
                                          ) of
                                  'True' when 'true' ->
                                      case call 'vvclock':'bgt_nat'
                                                ( call 'Coq.Init.Datatypes':'length' (_vclock)
                                                , _large
                                                ) of
                                        'True' when 'true' ->
                                            call 'vvclock':'prune@'
                                                 ( _c
                                                 , _small
                                                 , _large
                                                 , _young
                                                 , _old
                                                 )
                                        'False' when 'true' ->
                                            _vclock
                                       end
                                  'False' when 'true' ->
                                      _vclock
                                 end
                           end
                     end
               end
         end
   end
end


