module 'Coq.Init.Datatypes' [ 'negb'/1, 'length'/1 ] attributes [ ] 
'negb'/1 = fun (_b) -> 
  case _b of
    'True' when 'true' ->
        'False'
    'False' when 'true' ->
        'True'
   end
'length'/1 = fun (_l) -> 
  case _l of
    [] when 'true' ->
        'O'
    [_l@|_y] when 'true' ->
        {'S', call 'Coq.Init.Datatypes':'length' (_y)}
   end
end

module 'Coq.Init.Peano' [ 'max'/2 ] attributes [ ] 
'max'/2 = fun (_n, _m) -> 
  case _n of
    'O' when 'true' ->
        _m
    {'S', _n@} when 'true' ->
        case _m of
          'O' when 'true' ->
              _n
          {'S', _m@} when 'true' ->
              {'S', call 'Coq.Init.Peano':'max'
                   ( _n@
                   , _m@
                   )}
         end
   end
end

module 'Coq.Lists.List' [ 'fold_left'/3, 'filter'/2, 'find'/2 ] attributes [ ] 
'fold_left'/3 = fun (_f, _l, _a0) -> 
  case _l of
    [] when 'true' ->
        _a0
    [_t|_b] when 'true' ->
        call 'Coq.Lists.List':'fold_left'
             ( _f
             , _b
             , apply _f
                     ( _a0
                     , _t
                     )
             )
   end
'filter'/2 = fun (_f, _l) -> 
  case _l of
    [] when 'true' ->
        []
    [_l0|_x] when 'true' ->
        case apply _f (_l0) of
          'True' when 'true' ->
              [_l0|call 'Coq.Lists.List':'filter'
                   ( _f
                   , _x
                   )]
          'False' when 'true' ->
              call 'Coq.Lists.List':'filter'
                   ( _f
                   , _x
                   )
         end
   end
'find'/2 = fun (_f, _l) -> 
  case _l of
    [] when 'true' ->
        'None'
    [_tl|_x] when 'true' ->
        case apply _f (_tl) of
          'True' when 'true' ->
              {'Some', _tl}
          'False' when 'true' ->
              call 'Coq.Lists.List':'find'
                   ( _f
                   , _x
                   )
         end
   end
end

module 'Coq.Arith.EqNat' [ 'beq_nat'/2 ] attributes [ ] 
'beq_nat'/2 = fun (_n, _m) -> 
  case _n of
    'O' when 'true' ->
        case _m of
          'O' when 'true' ->
              'True'
          {'S', _n0} when 'true' ->
              'False'
         end
    {'S', _n1} when 'true' ->
        case _m of
          'O' when 'true' ->
              'False'
          {'S', _m1} when 'true' ->
              call 'Coq.Arith.EqNat':'beq_nat'
                   ( _n1
                   , _m1
                   )
         end
   end
end

module 'vvclock' [ 'find@'/2, 'find@@'/2, 'incr_timestamp'/1, 'incr_count'/1, 'increment'/2, 'equal@'/2, 'equal'/2, 'ble_nat'/2, 'descends@'/2, 'descends'/2, 'max@'/2, 'merge'/2, 'get_counter'/2, 'get_timestamp'/2, 'all_nodes'/1, 'bgt_nat'/2, 'prune@'/5 ] attributes [ ] 

'find@'/2 = fun (_actor, _clock) -> 
  case _clock of
    { 'Pair'
    , _p
    , _x
    } when 'true' ->
        call 'Coq.Arith.EqNat':'beq_nat'
             ( _actor
             , _p
             )
   end
'find@@'/2 = fun (_actor, _clock) -> 
  case _clock of
    { 'Pair'
    , _p
    , _x
    } when 'true' ->
        call 'Coq.Init.Datatypes':'negb' (call 'Coq.Arith.EqNat':'beq_nat'
               ( _actor
               , _p
               ))
   end

'incr_timestamp'/1 = fun (_timestamp) -> 
  {'S', _timestamp}

'incr_count'/1 = fun (_count) -> 
  {'S', _count}
'increment'/2 = fun (_actor, _vclock) -> 
  case call 'Coq.Lists.List':'find'
            ( call 'vvclock.VVClock':'find@' (_actor)
            , _vclock
            ) of
    {'Some', _c} when 'true' ->
        case _c of
          { 'Pair'
          , _p
          , _x
          } when 'true' ->
              case _x of
                { 'Pair'
                , _timestamp
                , _count
                } when 'true' ->
                    [{ 'Pair'
                    , _p
                    , { 'Pair'
                    , call 'vvclock.VVClock':'incr_count' (_timestamp)
                    , call 'vvclock.VVClock':'incr_timestamp' (_count)
                    }
                    }|call 'Coq.Lists.List':'filter'
                         ( call 'vvclock.VVClock':'find@' (_actor)
                         , _vclock
                         )]
               end
         end
    'None' when 'true' ->
        [{ 'Pair'
        , _actor
        , { 'Pair'
        , 'init_count'
        , 'init_timestamp'
        }
        }|_vclock]
   end
'equal@'/2 = fun (_status_and_vclock, _clock) -> 
  case _clock of
    { 'Pair'
    , _p
    , _actor
    } when 'true' ->
        case _actor of
          { 'Pair'
          , _timestamp
          , _count
          } when 'true' ->
              case _status_and_vclock of
                { 'Pair'
                , _vclock
                , _status
                } when 'true' ->
                    case call 'Coq.Lists.List':'find'
                              ( call 'vvclock.VVClock':'find@' (_p)
                              , _status
                              ) of
                      {'Some', _c} when 'true' ->
                          case _c of
                            { 'Pair'
                            , _p0
                            , _a
                            } when 'true' ->
                                case _a of
                                  { 'Pair'
                                  , _z
                                  , _y
                                  } when 'true' ->
                                      { 'Pair'
                                      , case _vclock of
                                        'True' when 'true' ->
                                            case call 'Coq.Arith.EqNat':'beq_nat'
                                                      ( _timestamp
                                                      , _z
                                                      ) of
                                              'True' when 'true' ->
                                                  call 'Coq.Arith.EqNat':'beq_nat'
                                                       ( _count
                                                       , _y
                                                       )
                                              'False' when 'true' ->
                                                  'False'
                                             end
                                        'False' when 'true' ->
                                            'False'
                                       end
                                      , _status
                                      }
                                 end
                           end
                      'None' when 'true' ->
                          { 'Pair'
                          , 'False'
                          , _status
                          }
                     end
               end
         end
   end
'equal'/2 = fun (_vc1, _vc2) -> 
  case call 'Coq.Lists.List':'fold_left'
            ( 'equal@'
            , _vc1
            , { 'Pair'
              , 'True'
              , _vc2
              }
            ) of
    { 'Pair'
    , _l
    , _b
    } when 'true' ->
        case _l of
          'True' when 'true' ->
              case call 'Coq.Lists.List':'fold_left'
                        ( 'equal@'
                        , _vc2
                        , { 'Pair'
                          , 'True'
                          , _vc1
                          }
                        ) of
                { 'Pair'
                , _l0
                , _b0
                } when 'true' ->
                    _l0
               end
          'False' when 'true' ->
              'False'
         end
   end
'ble_nat'/2 = fun (_n, _m) -> 
  case _n of
    'O' when 'true' ->
        'True'
    {'S', _n@} when 'true' ->
        case _m of
          'O' when 'true' ->
              'False'
          {'S', _m@} when 'true' ->
              call 'vvclock.VVClock':'ble_nat'
                   ( _n@
                   , _m@
                   )
         end
   end
'descends@'/2 = fun (_status_and_vclock, _clock) -> 
  case _clock of
    { 'Pair'
    , _p
    , _actor
    } when 'true' ->
        case _actor of
          { 'Pair'
          , _timestamp
          , _count
          } when 'true' ->
              case _status_and_vclock of
                { 'Pair'
                , _vclock
                , _status
                } when 'true' ->
                    case call 'Coq.Lists.List':'find'
                              ( call 'vvclock.VVClock':'find@' (_p)
                              , _status
                              ) of
                      {'Some', _c} when 'true' ->
                          case _c of
                            { 'Pair'
                            , _p0
                            , _a
                            } when 'true' ->
                                case _a of
                                  { 'Pair'
                                  , _z
                                  , _y
                                  } when 'true' ->
                                      { 'Pair'
                                      , case _vclock of
                                        'True' when 'true' ->
                                            case call 'vvclock.VVClock':'ble_nat'
                                                      ( _timestamp
                                                      , _z
                                                      ) of
                                              'True' when 'true' ->
                                                  call 'vvclock.VVClock':'ble_nat'
                                                       ( _count
                                                       , _y
                                                       )
                                              'False' when 'true' ->
                                                  'False'
                                             end
                                        'False' when 'true' ->
                                            'False'
                                       end
                                      , _status
                                      }
                                 end
                           end
                      'None' when 'true' ->
                          { 'Pair'
                          , 'False'
                          , _status
                          }
                     end
               end
         end
   end
'descends'/2 = fun (_vc1, _vc2) -> 
  case call 'Coq.Lists.List':'fold_left'
            ( 'descends@'
            , _vc2
            , { 'Pair'
              , 'True'
              , _vc1
              }
            ) of
    { 'Pair'
    , _l
    , _b
    } when 'true' ->
        _l
   end
'max@'/2 = fun (_vclock, _clock) -> 
  case _clock of
    { 'Pair'
    , _p
    , _actor
    } when 'true' ->
        case _actor of
          { 'Pair'
          , _timestamp
          , _count
          } when 'true' ->
              case call 'Coq.Lists.List':'find'
                        ( call 'vvclock.VVClock':'find@' (_p)
                        , _vclock
                        ) of
                {'Some', _c} when 'true' ->
                    case _c of
                      { 'Pair'
                      , _p0
                      , _a
                      } when 'true' ->
                          case _a of
                            { 'Pair'
                            , _z
                            , _y
                            } when 'true' ->
                                [{ 'Pair'
                                , _p
                                , { 'Pair'
                                , call 'Coq.Init.Peano':'max'
                                     ( _timestamp
                                     , _z
                                     )
                                , call 'Coq.Init.Peano':'max'
                                     ( _count
                                     , _y
                                     )
                                }
                                }|call 'Coq.Lists.List':'filter'
                                     ( call 'vvclock.VVClock':'find@@' (_p)
                                     , _vclock
                                     )]
                           end
                     end
                'None' when 'true' ->
                    [{ 'Pair'
                    , _p
                    , { 'Pair'
                    , _timestamp
                    , _count
                    }
                    }|_vclock]
               end
         end
   end
'merge'/2 = fun (_vc1, _vc2) -> 
  call 'Coq.Lists.List':'fold_left'
       ( 'max@'
       , _vc1
       , _vc2
       )
'get_counter'/2 = fun (_actor, _vclock) -> 
  case call 'Coq.Lists.List':'find'
            ( call 'vvclock.VVClock':'find@' (_actor)
            , _vclock
            ) of
    {'Some', _c} when 'true' ->
        case _c of
          { 'Pair'
          , _p
          , _a
          } when 'true' ->
              case _a of
                { 'Pair'
                , _timetsamp
                , _count
                } when 'true' ->
                    {'Some', _timetsamp}
               end
         end
    'None' when 'true' ->
        'None'
   end
'get_timestamp'/2 = fun (_actor, _vclock) -> 
  case call 'Coq.Lists.List':'find'
            ( call 'vvclock.VVClock':'find@' (_actor)
            , _vclock
            ) of
    {'Some', _c} when 'true' ->
        {'Some', 'dummy'}
    'None' when 'true' ->
        'None'
   end
'all_nodes'/1 = fun (_vclock) -> 
  case _vclock of
    [] when 'true' ->
        []
    [_cs|_c] when 'true' ->
        case _cs of
          { 'Pair'
          , _y
          , _x
          } when 'true' ->
              [_y|call 'vvclock.VVClock':'all_nodes' (_c)]
         end
   end
'bgt_nat'/2 = fun (_m, _n) -> 
  call 'Coq.Init.Datatypes':'negb' (call 'vvclock.VVClock':'ble_nat'
         ( _m
         , _n
         ))
'prune@'/5 = fun (_vclock, _small, _large, _young, _old) -> 
  case _vclock of
    [] when 'true' ->
        _vclock
    [_clocks|_c] when 'true' ->
        case _clocks of
          { 'Pair'
          , _p
          , _actor
          } when 'true' ->
              case _actor of
                { 'Pair'
                , _timestamp
                , _count
                } when 'true' ->
                    case call 'vvclock.VVClock':'ble_nat'
                              ( call 'Coq.Init.Datatypes':'length' (_vclock)
                              , _small
                              ) of
                      'True' when 'true' ->
                          _vclock
                      'False' when 'true' ->
                          case call 'vvclock.VVClock':'ble_nat'
                                    ( _count
                                    , _young
                                    ) of
                            'True' when 'true' ->
                                _vclock
                            'False' when 'true' ->
                                case call 'vvclock.VVClock':'bgt_nat'
                                          ( _count
                                          , _old
                                          ) of
                                  'True' when 'true' ->
                                      case call 'vvclock.VVClock':'bgt_nat'
                                                ( call 'Coq.Init.Datatypes':'length' (_vclock)
                                                , _large
                                                ) of
                                        'True' when 'true' ->
                                            call 'vvclock.VVClock':'prune@'
                                                 ( _c
                                                 , _small
                                                 , _large
                                                 , _young
                                                 , _old
                                                 )
                                        'False' when 'true' ->
                                            _vclock
                                       end
                                  'False' when 'true' ->
                                      _vclock
                                 end
                           end
                     end
               end
         end
   end
end


